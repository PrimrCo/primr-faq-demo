name: Comprehensive Testing & Quality Assurance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  MONGODB_URI: ${{ secrets.MONGODB_URI_TEST }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
  AWS_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_TEST }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_TEST }}
  AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME_TEST }}

jobs:
  # Quality Gates - Code Quality and Linting
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Check TypeScript compilation
      run: npx tsc --noEmit
      
    - name: Build application
      run: npm run build

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality-gates
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests
      run: npx jest --selectProjects=unit --coverage --passWithNoTests
      
    - name: Upload unit test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unit-tests
        name: unit-test-coverage

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: quality-gates
    
    services:
      mongodb:
        image: mongo:latest
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test
        ports:
          - 27017:27017
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Wait for MongoDB
      run: |
        timeout 60 bash -c 'until nc -z localhost 27017; do sleep 1; done'
        
    - name: Run integration tests
      run: npx jest --selectProjects=integration --coverage --passWithNoTests
      env:
        MONGODB_URI: mongodb://test:test@localhost:27017/test?authSource=admin
        
    - name: Upload integration test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: integration-tests
        name: integration-test-coverage

  # AI Quality Tests
  ai-quality-tests:
    name: AI Quality Tests
    runs-on: ubuntu-latest
    needs: quality-gates
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run AI quality tests
      run: npx jest --selectProjects=ai-quality --passWithNoTests
      env:
        OPENAI_API_KEY: ${{ env.OPENAI_API_KEY }}
        
    - name: Upload AI quality test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: ai-quality-test-results
        path: test-results/

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    services:
      mongodb:
        image: mongo:latest
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test
        ports:
          - 27017:27017
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Start application
      run: npm start &
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://test:test@localhost:27017/test?authSource=admin
        
    - name: Wait for application to start
      run: |
        timeout 120 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
        
    - name: Run performance tests
      run: npx jest --selectProjects=performance --passWithNoTests
      
    - name: Upload performance test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: test-results/

  # End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    services:
      mongodb:
        image: mongo:latest
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test
        ports:
          - 27017:27017
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Build application
      run: npm run build
      
    - name: Run Playwright tests
      run: npx playwright test
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://test:test@localhost:27017/test?authSource=admin
        
    - name: Upload Playwright report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: quality-gates
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true

  # Coverage Aggregation and Quality Check
  coverage-check:
    name: Coverage Check
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run all tests with coverage
      run: npx jest --coverage --passWithNoTests
      
    - name: Check coverage threshold
      run: |
        COVERAGE=$(npx nyc report --reporter=text-summary | grep "statements" | awk '{print $3}' | sed 's/%//')
        echo "Coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 90" | bc -l) )); then
          echo "Coverage $COVERAGE% is below 90% threshold"
          exit 1
        fi
      
    - name: Upload combined coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: combined
        name: combined-coverage

  # Deployment Quality Gates
  deployment-readiness:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, ai-quality-tests, performance-tests, e2e-tests, security-tests, coverage-check]
    if: always()
    
    steps:
    - name: Check all tests passed
      run: |
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        echo "AI Quality Tests: ${{ needs.ai-quality-tests.result }}"
        echo "Performance Tests: ${{ needs.performance-tests.result }}"
        echo "E2E Tests: ${{ needs.e2e-tests.result }}"
        echo "Security Tests: ${{ needs.security-tests.result }}"
        echo "Coverage Check: ${{ needs.coverage-check.result }}"
        
        if [[ "${{ needs.unit-tests.result }}" != "success" ]] || \
           [[ "${{ needs.integration-tests.result }}" != "success" ]] || \
           [[ "${{ needs.coverage-check.result }}" != "success" ]]; then
          echo "Critical tests failed - deployment blocked"
          exit 1
        fi
        
        echo "All critical quality gates passed - ready for deployment"
        
    - name: Generate quality report
      run: |
        echo "# Quality Assurance Report" >> quality-report.md
        echo "" >> quality-report.md
        echo "## Test Results" >> quality-report.md
        echo "- ✅ Unit Tests: ${{ needs.unit-tests.result }}" >> quality-report.md
        echo "- ✅ Integration Tests: ${{ needs.integration-tests.result }}" >> quality-report.md
        echo "- ⚡ AI Quality Tests: ${{ needs.ai-quality-tests.result }}" >> quality-report.md
        echo "- 🚀 Performance Tests: ${{ needs.performance-tests.result }}" >> quality-report.md
        echo "- 🌐 E2E Tests: ${{ needs.e2e-tests.result }}" >> quality-report.md
        echo "- 🔒 Security Tests: ${{ needs.security-tests.result }}" >> quality-report.md
        echo "- 📊 Coverage Check: ${{ needs.coverage-check.result }}" >> quality-report.md
        echo "" >> quality-report.md
        echo "Generated on: $(date)" >> quality-report.md
        
    - name: Upload quality report
      uses: actions/upload-artifact@v3
      with:
        name: quality-assurance-report
        path: quality-report.md